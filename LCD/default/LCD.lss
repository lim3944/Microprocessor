
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001be  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000074  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002eb  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000151  00000000  00000000  000005c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a5  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000104  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000dc  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  b6:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <EnablePulse>:
#define LCD_RS 0x01
#define LCD_RW 0x02
#define LCD_E 0x04

void EnablePulse(void){
	LCD_CTRL |= LCD_E;
  be:	e5 e6       	ldi	r30, 0x65	; 101
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	80 83       	st	Z, r24
	asm("NOP");
  c8:	00 00       	nop
	LCD_CTRL &=~LCD_E;
  ca:	80 81       	ld	r24, Z
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	80 83       	st	Z, r24
}
  d0:	08 95       	ret

000000d2 <sendLCDcommand>:

void sendLCDcommand(unsigned char command){
	LCD_CTRL &=~LCD_RS;
  d2:	e5 e6       	ldi	r30, 0x65	; 101
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	9e 7f       	andi	r25, 0xFE	; 254
  da:	90 83       	st	Z, r25
	LCD_DATA=command;
  dc:	8b bb       	out	0x1b, r24	; 27
#define LCD_RS 0x01
#define LCD_RW 0x02
#define LCD_E 0x04

void EnablePulse(void){
	LCD_CTRL |= LCD_E;
  de:	80 81       	ld	r24, Z
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	80 83       	st	Z, r24
	asm("NOP");
  e4:	00 00       	nop
	LCD_CTRL &=~LCD_E;
  e6:	80 81       	ld	r24, Z
  e8:	8b 7f       	andi	r24, 0xFB	; 251
  ea:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ec:	88 e8       	ldi	r24, 0x88	; 136
  ee:	93 e1       	ldi	r25, 0x13	; 19
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <sendLCDcommand+0x1e>
void sendLCDcommand(unsigned char command){
	LCD_CTRL &=~LCD_RS;
	LCD_DATA=command;
	EnablePulse();
	_delay_ms(20);
}
  f4:	08 95       	ret

000000f6 <InitLcd>:

void InitLcd(void){
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	9f ef       	ldi	r25, 0xFF	; 255
  fa:	29 e1       	ldi	r18, 0x19	; 25
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <InitLcd+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 106:	d9 f7       	brne	.-10     	; 0xfe <InitLcd+0x8>
	_delay_ms(20000);
	LCD_CTRL &=~LCD_RW;
 108:	80 91 65 00 	lds	r24, 0x0065
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 93 65 00 	sts	0x0065, r24
	sendLCDcommand(0x38);
 112:	88 e3       	ldi	r24, 0x38	; 56
 114:	0e 94 69 00 	call	0xd2	; 0xd2 <sendLCDcommand>
	sendLCDcommand(0x0C);
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	0e 94 69 00 	call	0xd2	; 0xd2 <sendLCDcommand>
	sendLCDcommand(0x01);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 69 00 	call	0xd2	; 0xd2 <sendLCDcommand>
 124:	80 e1       	ldi	r24, 0x10	; 16
 126:	97 e2       	ldi	r25, 0x27	; 39
 128:	29 e1       	ldi	r18, 0x19	; 25
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <InitLcd+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 132:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 134:	d9 f7       	brne	.-10     	; 0x12c <InitLcd+0x36>
	_delay_ms(1000);
}
 136:	08 95       	ret

00000138 <sendLCDdata>:

void sendLCDdata(unsigned char data){
	LCD_CTRL |= LCD_RS;
 138:	e5 e6       	ldi	r30, 0x65	; 101
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	91 60       	ori	r25, 0x01	; 1
 140:	90 83       	st	Z, r25
	LCD_DATA =data;
 142:	8b bb       	out	0x1b, r24	; 27
#define LCD_RS 0x01
#define LCD_RW 0x02
#define LCD_E 0x04

void EnablePulse(void){
	LCD_CTRL |= LCD_E;
 144:	80 81       	ld	r24, Z
 146:	84 60       	ori	r24, 0x04	; 4
 148:	80 83       	st	Z, r24
	asm("NOP");
 14a:	00 00       	nop
	LCD_CTRL &=~LCD_E;
 14c:	80 81       	ld	r24, Z
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	80 83       	st	Z, r24
 152:	88 e8       	ldi	r24, 0x88	; 136
 154:	93 e1       	ldi	r25, 0x13	; 19
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <sendLCDdata+0x1e>
void sendLCDdata(unsigned char data){
	LCD_CTRL |= LCD_RS;
	LCD_DATA =data;
	EnablePulse();
	_delay_ms(20);
}
 15a:	08 95       	ret

0000015c <DispString>:

void DispString(char *str){
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	ec 01       	movw	r28, r24
 162:	03 c0       	rjmp	.+6      	; 0x16a <DispString+0xe>
	while(*str){
		sendLCDdata(*str);
 164:	0e 94 9c 00 	call	0x138	; 0x138 <sendLCDdata>
		str++;
 168:	21 96       	adiw	r28, 0x01	; 1
	EnablePulse();
	_delay_ms(20);
}

void DispString(char *str){
	while(*str){
 16a:	88 81       	ld	r24, Y
 16c:	88 23       	and	r24, r24
 16e:	d1 f7       	brne	.-12     	; 0x164 <DispString+0x8>
		sendLCDdata(*str);
		str++;
	}
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <Locata>:

void Locata(int x,int y){
	unsigned char RamAddr;

	if(x==0) RamAddr=0x80+y;
 176:	89 2b       	or	r24, r25
 178:	19 f4       	brne	.+6      	; 0x180 <Locata+0xa>
 17a:	86 2f       	mov	r24, r22
 17c:	80 58       	subi	r24, 0x80	; 128
 17e:	02 c0       	rjmp	.+4      	; 0x184 <Locata+0xe>
	else RamAddr=0xC0+y;
 180:	86 2f       	mov	r24, r22
 182:	80 54       	subi	r24, 0x40	; 64
	sendLCDcommand(RamAddr);
 184:	0e 94 69 00 	call	0xd2	; 0xd2 <sendLCDcommand>
}
 188:	08 95       	ret

0000018a <main>:

int main(){
	DDRA=0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	8a bb       	out	0x1a, r24	; 26
	DDRG=0xFF;
 18e:	80 93 64 00 	sts	0x0064, r24
	PORTA=0x00;
 192:	1b ba       	out	0x1b, r1	; 27
	PORTG=0x00;
 194:	10 92 65 00 	sts	0x0065, r1

	InitLcd();
 198:	0e 94 7b 00 	call	0xf6	; 0xf6 <InitLcd>

	DispString("Happy Day");
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 ae 00 	call	0x15c	; 0x15c <DispString>
	Locata(1,4);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	64 e0       	ldi	r22, 0x04	; 4
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 bb 00 	call	0x176	; 0x176 <Locata>
	DispString("Welcome!");
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 ae 00 	call	0x15c	; 0x15c <DispString>
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <main+0x2e>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
