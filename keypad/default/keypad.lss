
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001cb  00000000  00000000  00000207  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ef  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000020b  00000000  00000000  000004c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cc  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000186  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include<avr/io.h>
#include<util/delay.h>

int main(){
  be:	1f 93       	push	r17

	unsigned char led=0; 
	unsigned char input_data=0; 
	unsigned char key=0;

	DDRF=0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	80 93 61 00 	sts	0x0061, r24
	DDRA=0xFF;
  c6:	8a bb       	out	0x1a, r24	; 26
	DDRD=0x00;
  c8:	11 ba       	out	0x11, r1	; 17

	while(1){
		key=0;
		
		PORTF= 0x01;
  ca:	11 e0       	ldi	r17, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  cc:	4a ef       	ldi	r20, 0xFA	; 250
  ce:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(1);
		input_data=PIND & 0x07;
		if(input_data!=0) key=(input_data/2)+1;

		PORTF=0x02;
  d0:	b2 e0       	ldi	r27, 0x02	; 2
		_delay_ms(1);
		input_data=PIND & 0x07;
		if(input_data !=0) key=(input_data/2)+4;

		PORTF= 0x04;
  d2:	a4 e0       	ldi	r26, 0x04	; 4
		_delay_ms(1);
		input_data=PIND & 0x07;
		if(input_data!=0) key=(input_data/2)+7;
		
		PORTF=0x08;
  d4:	38 e0       	ldi	r19, 0x08	; 8
		input_data=PIND & 0x07;
		if(input_data != 0) key=(input_data/2)+10;

		led=0x01;
		if(key==0) led=0x00;
		else if(key<9) led=led<<(key-1);
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	70 e0       	ldi	r23, 0x00	; 0
	DDRD=0x00;

	while(1){
		key=0;
		
		PORTF= 0x01;
  da:	10 93 62 00 	sts	0x0062, r17
  de:	ca 01       	movw	r24, r20
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x22>
		_delay_ms(1);
		input_data=PIND & 0x07;
  e4:	80 b3       	in	r24, 0x10	; 16
  e6:	87 70       	andi	r24, 0x07	; 7
		if(input_data!=0) key=(input_data/2)+1;
  e8:	11 f0       	breq	.+4      	; 0xee <main+0x30>
  ea:	86 95       	lsr	r24
  ec:	8f 5f       	subi	r24, 0xFF	; 255

		PORTF=0x02;
  ee:	b0 93 62 00 	sts	0x0062, r27
  f2:	fa 01       	movw	r30, r20
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x36>
		_delay_ms(1);
		input_data=PIND & 0x07;
  f8:	20 b3       	in	r18, 0x10	; 16
  fa:	27 70       	andi	r18, 0x07	; 7
		if(input_data !=0) key=(input_data/2)+4;
  fc:	19 f0       	breq	.+6      	; 0x104 <main+0x46>
  fe:	82 2f       	mov	r24, r18
 100:	86 95       	lsr	r24
 102:	8c 5f       	subi	r24, 0xFC	; 252

		PORTF= 0x04;
 104:	a0 93 62 00 	sts	0x0062, r26
 108:	fa 01       	movw	r30, r20
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x4c>
		_delay_ms(1);
		input_data=PIND & 0x07;
 10e:	20 b3       	in	r18, 0x10	; 16
 110:	27 70       	andi	r18, 0x07	; 7
		if(input_data!=0) key=(input_data/2)+7;
 112:	19 f0       	breq	.+6      	; 0x11a <main+0x5c>
 114:	82 2f       	mov	r24, r18
 116:	86 95       	lsr	r24
 118:	89 5f       	subi	r24, 0xF9	; 249
		
		PORTF=0x08;
 11a:	30 93 62 00 	sts	0x0062, r19
 11e:	fa 01       	movw	r30, r20
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x62>
		_delay_ms(1);
		input_data=PIND & 0x07;
 124:	20 b3       	in	r18, 0x10	; 16
 126:	27 70       	andi	r18, 0x07	; 7
		if(input_data != 0) key=(input_data/2)+10;
 128:	21 f0       	breq	.+8      	; 0x132 <main+0x74>
 12a:	82 2f       	mov	r24, r18
 12c:	86 95       	lsr	r24
 12e:	86 5f       	subi	r24, 0xF6	; 246
 130:	0e c0       	rjmp	.+28     	; 0x14e <main+0x90>

		led=0x01;
		if(key==0) led=0x00;
 132:	88 23       	and	r24, r24
 134:	e9 f0       	breq	.+58     	; 0x170 <main+0xb2>
		else if(key<9) led=led<<(key-1);
 136:	89 30       	cpi	r24, 0x09	; 9
 138:	50 f4       	brcc	.+20     	; 0x14e <main+0x90>
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	fb 01       	movw	r30, r22
 140:	02 c0       	rjmp	.+4      	; 0x146 <main+0x88>
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	8a 95       	dec	r24
 148:	e2 f7       	brpl	.-8      	; 0x142 <main+0x84>
 14a:	cf 01       	movw	r24, r30
 14c:	11 c0       	rjmp	.+34     	; 0x170 <main+0xb2>
		else if(key==9) led=0x81;
 14e:	89 30       	cpi	r24, 0x09	; 9
 150:	11 f4       	brne	.+4      	; 0x156 <main+0x98>
 152:	81 e8       	ldi	r24, 0x81	; 129
 154:	0d c0       	rjmp	.+26     	; 0x170 <main+0xb2>
		else if(key==10) led=0x0F;
 156:	8a 30       	cpi	r24, 0x0A	; 10
 158:	11 f4       	brne	.+4      	; 0x15e <main+0xa0>
 15a:	8f e0       	ldi	r24, 0x0F	; 15
 15c:	09 c0       	rjmp	.+18     	; 0x170 <main+0xb2>
		else if(key==11) led = 0xFF;
 15e:	8b 30       	cpi	r24, 0x0B	; 11
 160:	11 f4       	brne	.+4      	; 0x166 <main+0xa8>
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	05 c0       	rjmp	.+10     	; 0x170 <main+0xb2>
		else if(key==12) led = 0xF0;
 166:	8c 30       	cpi	r24, 0x0C	; 12
 168:	11 f4       	brne	.+4      	; 0x16e <main+0xb0>
 16a:	80 ef       	ldi	r24, 0xF0	; 240
 16c:	01 c0       	rjmp	.+2      	; 0x170 <main+0xb2>
 16e:	81 e0       	ldi	r24, 0x01	; 1
		PORTA=led;
 170:	8b bb       	out	0x1b, r24	; 27
 172:	b3 cf       	rjmp	.-154    	; 0xda <main+0x1c>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
