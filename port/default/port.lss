
port.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000027  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000017f  00000000  00000000  000001dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011f  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b0  00000000  00000000  0000047b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ca  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000068  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 67 00 	call	0xce	; 0xce <main>
  b6:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <checker>:
#include<avr/io.h>
#include<util/delay.h>

int checker(int a){
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	89 2b       	or	r24, r25
  c4:	11 f4       	brne	.+4      	; 0xca <checker+0xc>
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
	if(a)
		return 0;
	else
		return 1;
}
  ca:	c9 01       	movw	r24, r18
  cc:	08 95       	ret

000000ce <main>:

int main(void){
	unsigned char input_data;
	int chk=1;
	DDRD=0x00;
  ce:	11 ba       	out	0x11, r1	; 17
	DDRA=0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26

	PORTA=0x01;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	8b bb       	out	0x1b, r24	; 27
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  dc:	69 e1       	ldi	r22, 0x19	; 25
  de:	70 e0       	ldi	r23, 0x00	; 0
			input_data=0;
		}
		if(chk==1&&PORTA==0)
			PORTA=0x01;
		if(chk==0&&PORTA==0)
			PORTA=0x80;
  e0:	a0 e8       	ldi	r26, 0x80	; 128
		if((input_data&0x10)==0x10){
			chk=checker(chk);
			input_data=0;
		}
		if(chk==1&&PORTA==0)
			PORTA=0x01;
  e2:	51 e0       	ldi	r21, 0x01	; 1
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x1c>
	unsigned char input_data;
	int chk=1;
	DDRD=0x00;
	DDRA=0xFF;

	PORTA=0x01;
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0

	while(1){
		input_data=PIND;
  ea:	40 b3       	in	r20, 0x10	; 16
  ec:	80 e1       	ldi	r24, 0x10	; 16
  ee:	97 e2       	ldi	r25, 0x27	; 39
  f0:	fb 01       	movw	r30, r22
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f8:	d9 f7       	brne	.-10     	; 0xf0 <main+0x22>
		_delay_ms(1000);
		if(chk==1)
  fa:	21 30       	cpi	r18, 0x01	; 1
  fc:	31 05       	cpc	r19, r1
  fe:	29 f4       	brne	.+10     	; 0x10a <main+0x3c>
			PORTA*=2;
 100:	8b b3       	in	r24, 0x1b	; 27
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	02 c0       	rjmp	.+4      	; 0x10e <main+0x40>
		else
			PORTA/=2;
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	86 95       	lsr	r24
 10e:	8b bb       	out	0x1b, r24	; 27
		if((input_data&0x10)==0x10){
 110:	44 ff       	sbrs	r20, 4
 112:	05 c0       	rjmp	.+10     	; 0x11e <main+0x50>
#include<avr/io.h>
#include<util/delay.h>

int checker(int a){
	if(a)
 114:	23 2b       	or	r18, r19
 116:	71 f4       	brne	.+28     	; 0x134 <main+0x66>
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	03 c0       	rjmp	.+6      	; 0x124 <main+0x56>
			PORTA/=2;
		if((input_data&0x10)==0x10){
			chk=checker(chk);
			input_data=0;
		}
		if(chk==1&&PORTA==0)
 11e:	21 30       	cpi	r18, 0x01	; 1
 120:	31 05       	cpc	r19, r1
 122:	29 f4       	brne	.+10     	; 0x12e <main+0x60>
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	88 23       	and	r24, r24
 128:	01 f7       	brne	.-64     	; 0xea <main+0x1c>
			PORTA=0x01;
 12a:	5b bb       	out	0x1b, r21	; 27
 12c:	de cf       	rjmp	.-68     	; 0xea <main+0x1c>
		if(chk==0&&PORTA==0)
 12e:	21 15       	cp	r18, r1
 130:	31 05       	cpc	r19, r1
 132:	d9 f6       	brne	.-74     	; 0xea <main+0x1c>
 134:	8b b3       	in	r24, 0x1b	; 27
 136:	88 23       	and	r24, r24
 138:	b1 f6       	brne	.-84     	; 0xe6 <main+0x18>
			PORTA=0x80;
 13a:	ab bb       	out	0x1b, r26	; 27
 13c:	d4 cf       	rjmp	.-88     	; 0xe6 <main+0x18>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
