
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002ac  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800112  00800112  00000352  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000068  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002f0  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018a  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000287  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011e  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000084  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  c6:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_16>:
const char Font[17]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,0x00};

volatile unsigned int t2_100=0;
volatile unsigned char state=STOP;

SIGNAL(SIG_OVERFLOW0){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	TCNT0=112;
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	82 bf       	out	0x32, r24	; 50
	if(state==START)
  e2:	80 91 14 01 	lds	r24, 0x0114
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	49 f4       	brne	.+18     	; 0xfc <__vector_16+0x2e>
	t2_100++;
  ea:	80 91 12 01 	lds	r24, 0x0112
  ee:	90 91 13 01 	lds	r25, 0x0113
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 13 01 	sts	0x0113, r25
  f8:	80 93 12 01 	sts	0x0112, r24

	if(t2_100>=9999) t2_100=0;
  fc:	80 91 12 01 	lds	r24, 0x0112
 100:	90 91 13 01 	lds	r25, 0x0113
 104:	8f 50       	subi	r24, 0x0F	; 15
 106:	97 42       	sbci	r25, 0x27	; 39
 108:	20 f0       	brcs	.+8      	; 0x112 <__vector_16+0x44>
 10a:	10 92 13 01 	sts	0x0113, r1
 10e:	10 92 12 01 	sts	0x0112, r1
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <Init_Timer>:

void Init_Timer(void){
	TCCR0=0x07;
 122:	87 e0       	ldi	r24, 0x07	; 7
 124:	83 bf       	out	0x33, r24	; 51
	TCNT0=112;
 126:	80 e7       	ldi	r24, 0x70	; 112
 128:	82 bf       	out	0x32, r24	; 50
	TIMSK=0x01;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	87 bf       	out	0x37, r24	; 55
}
 12e:	08 95       	ret

00000130 <FND_Display>:

void FND_Display(unsigned char digit0,unsigned char digit1,unsigned char digit2,unsigned char digit3){
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
	PORTG |= 0x0F;
 138:	a5 e6       	ldi	r26, 0x65	; 101
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	9c 91       	ld	r25, X
 13e:	9f 60       	ori	r25, 0x0F	; 15
 140:	9c 93       	st	X, r25
	PORTG &= ~FND_C3;
 142:	9c 91       	ld	r25, X
 144:	97 7f       	andi	r25, 0xF7	; 247
 146:	9c 93       	st	X, r25
	PORTB = Font[digit0];
 148:	00 e0       	ldi	r16, 0x00	; 0
 14a:	11 e0       	ldi	r17, 0x01	; 1
 14c:	f8 01       	movw	r30, r16
 14e:	e8 0f       	add	r30, r24
 150:	f1 1d       	adc	r31, r1
 152:	80 81       	ld	r24, Z
 154:	88 bb       	out	0x18, r24	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 156:	84 ed       	ldi	r24, 0xD4	; 212
 158:	e8 2e       	mov	r14, r24
 15a:	80 e3       	ldi	r24, 0x30	; 48
 15c:	f8 2e       	mov	r15, r24
 15e:	c7 01       	movw	r24, r14
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <FND_Display+0x30>
	_delay_ms(50);

	PORTG |= 0x0F;
 164:	8c 91       	ld	r24, X
 166:	8f 60       	ori	r24, 0x0F	; 15
 168:	8c 93       	st	X, r24
	PORTG &= ~FND_C2;
 16a:	8c 91       	ld	r24, X
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	8c 93       	st	X, r24
	PORTB = Font[digit1];
 170:	f8 01       	movw	r30, r16
 172:	e6 0f       	add	r30, r22
 174:	f1 1d       	adc	r31, r1
 176:	80 81       	ld	r24, Z
 178:	88 bb       	out	0x18, r24	; 24
 17a:	c7 01       	movw	r24, r14
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <FND_Display+0x4c>
	_delay_ms(50);

	PORTG |= 0x0F;
 180:	8c 91       	ld	r24, X
 182:	8f 60       	ori	r24, 0x0F	; 15
 184:	8c 93       	st	X, r24
	PORTG &= ~FND_C1;
 186:	8c 91       	ld	r24, X
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	8c 93       	st	X, r24
	PORTB = Font[digit2];
 18c:	f8 01       	movw	r30, r16
 18e:	e4 0f       	add	r30, r20
 190:	f1 1d       	adc	r31, r1
 192:	80 81       	ld	r24, Z
 194:	88 bb       	out	0x18, r24	; 24
 196:	c7 01       	movw	r24, r14
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <FND_Display+0x68>
	_delay_ms(50);

	PORTG |= 0x0F;
 19c:	8c 91       	ld	r24, X
 19e:	8f 60       	ori	r24, 0x0F	; 15
 1a0:	8c 93       	st	X, r24
	PORTG &= ~FND_C0;
 1a2:	8c 91       	ld	r24, X
 1a4:	8e 7f       	andi	r24, 0xFE	; 254
 1a6:	8c 93       	st	X, r24
	PORTB = Font[digit3];
 1a8:	02 0f       	add	r16, r18
 1aa:	11 1d       	adc	r17, r1
 1ac:	f8 01       	movw	r30, r16
 1ae:	80 81       	ld	r24, Z
 1b0:	88 bb       	out	0x18, r24	; 24
 1b2:	c7 01       	movw	r24, r14
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <FND_Display+0x84>
	_delay_ms(50);
}
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	08 95       	ret

000001c2 <main>:

int main(void){
 1c2:	0f 93       	push	r16
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
	unsigned char digit0,digit1,digit2,digit3;
	unsigned int temp=0;
	unsigned char key=0,past_key=0;

	DDRB=0xFF;
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	87 bb       	out	0x17, r24	; 23
	DDRG=0xFF;
 1cc:	80 93 64 00 	sts	0x0064, r24
	DDRD=0x00;
 1d0:	11 ba       	out	0x11, r1	; 17

	PORTB=0x00;
 1d2:	18 ba       	out	0x18, r1	; 24
	PORTG=0xFF;
 1d4:	80 93 65 00 	sts	0x0065, r24

	if(t2_100>=9999) t2_100=0;
}

void Init_Timer(void){
	TCCR0=0x07;
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	83 bf       	out	0x33, r24	; 51
	TCNT0=112;
 1dc:	80 e7       	ldi	r24, 0x70	; 112
 1de:	82 bf       	out	0x32, r24	; 50
	TIMSK=0x01;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	87 bf       	out	0x37, r24	; 55
	PORTB=0x00;
	PORTG=0xFF;

	digit0 = digit1 = digit2 = digit3 = 0;
	Init_Timer();
	sei();
 1e4:	78 94       	sei
 1e6:	80 e0       	ldi	r24, 0x00	; 0

	while(1) {
		key=PIND&0x03;
 1e8:	00 b3       	in	r16, 0x10	; 16
 1ea:	03 70       	andi	r16, 0x03	; 3
		if((past_key==0x00)&&(key!=0x00)) {
 1ec:	88 23       	and	r24, r24
 1ee:	b9 f4       	brne	.+46     	; 0x21e <main+0x5c>
 1f0:	00 23       	and	r16, r16
 1f2:	a9 f0       	breq	.+42     	; 0x21e <main+0x5c>
			switch(key) {
 1f4:	01 30       	cpi	r16, 0x01	; 1
 1f6:	19 f0       	breq	.+6      	; 0x1fe <main+0x3c>
 1f8:	02 30       	cpi	r16, 0x02	; 2
 1fa:	89 f4       	brne	.+34     	; 0x21e <main+0x5c>
 1fc:	0a c0       	rjmp	.+20     	; 0x212 <main+0x50>
				case S0:
					if(state==START) state=STOP;
 1fe:	80 91 14 01 	lds	r24, 0x0114
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	19 f4       	brne	.+6      	; 0x20c <main+0x4a>
 206:	10 92 14 01 	sts	0x0114, r1
 20a:	09 c0       	rjmp	.+18     	; 0x21e <main+0x5c>
					else state=START;
 20c:	00 93 14 01 	sts	0x0114, r16
 210:	06 c0       	rjmp	.+12     	; 0x21e <main+0x5c>
					break;
				
				case S1:
					state=STOP;
 212:	10 92 14 01 	sts	0x0114, r1
					t2_100=0;
 216:	10 92 13 01 	sts	0x0113, r1
 21a:	10 92 12 01 	sts	0x0112, r1
					break;
			}
		}

		past_key=key;
		digit3=t2_100/1000;
 21e:	c0 91 12 01 	lds	r28, 0x0112
 222:	d0 91 13 01 	lds	r29, 0x0113
		temp=t2_100%1000;
 226:	80 91 12 01 	lds	r24, 0x0112
 22a:	90 91 13 01 	lds	r25, 0x0113
 22e:	68 ee       	ldi	r22, 0xE8	; 232
 230:	73 e0       	ldi	r23, 0x03	; 3
 232:	0e 94 40 01 	call	0x280	; 0x280 <__udivmodhi4>
 236:	48 2f       	mov	r20, r24
 238:	e9 2f       	mov	r30, r25
		digit2=temp/100;
		temp=temp%100;
 23a:	64 e6       	ldi	r22, 0x64	; 100
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	0e 94 40 01 	call	0x280	; 0x280 <__udivmodhi4>
 242:	9c 01       	movw	r18, r24
		digit1=temp/10;
		digit0=temp%10;

		FND_Display(digit0,digit1,digit2,digit3);
 244:	6a e0       	ldi	r22, 0x0A	; 10
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	0e 94 40 01 	call	0x280	; 0x280 <__udivmodhi4>
 24c:	f8 2f       	mov	r31, r24
 24e:	c9 01       	movw	r24, r18
 250:	6a e0       	ldi	r22, 0x0A	; 10
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	0e 94 40 01 	call	0x280	; 0x280 <__udivmodhi4>
 258:	36 2f       	mov	r19, r22
 25a:	84 2f       	mov	r24, r20
 25c:	9e 2f       	mov	r25, r30
 25e:	64 e6       	ldi	r22, 0x64	; 100
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	0e 94 40 01 	call	0x280	; 0x280 <__udivmodhi4>
 266:	46 2f       	mov	r20, r22
 268:	ce 01       	movw	r24, r28
 26a:	68 ee       	ldi	r22, 0xE8	; 232
 26c:	73 e0       	ldi	r23, 0x03	; 3
 26e:	0e 94 40 01 	call	0x280	; 0x280 <__udivmodhi4>
 272:	26 2f       	mov	r18, r22
 274:	8f 2f       	mov	r24, r31
 276:	63 2f       	mov	r22, r19
 278:	0e 94 98 00 	call	0x130	; 0x130 <FND_Display>
 27c:	80 2f       	mov	r24, r16
 27e:	b4 cf       	rjmp	.-152    	; 0x1e8 <main+0x26>

00000280 <__udivmodhi4>:
 280:	aa 1b       	sub	r26, r26
 282:	bb 1b       	sub	r27, r27
 284:	51 e1       	ldi	r21, 0x11	; 17
 286:	07 c0       	rjmp	.+14     	; 0x296 <__udivmodhi4_ep>

00000288 <__udivmodhi4_loop>:
 288:	aa 1f       	adc	r26, r26
 28a:	bb 1f       	adc	r27, r27
 28c:	a6 17       	cp	r26, r22
 28e:	b7 07       	cpc	r27, r23
 290:	10 f0       	brcs	.+4      	; 0x296 <__udivmodhi4_ep>
 292:	a6 1b       	sub	r26, r22
 294:	b7 0b       	sbc	r27, r23

00000296 <__udivmodhi4_ep>:
 296:	88 1f       	adc	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	5a 95       	dec	r21
 29c:	a9 f7       	brne	.-22     	; 0x288 <__udivmodhi4_loop>
 29e:	80 95       	com	r24
 2a0:	90 95       	com	r25
 2a2:	bc 01       	movw	r22, r24
 2a4:	cd 01       	movw	r24, r26
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
