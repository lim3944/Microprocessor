
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000142  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  000001e8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000005d  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000111  00000000  00000000  00000265  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000bd  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000cd  00000000  00000000  00000433  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000a8  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  c6:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init_UART>:
const char Font[17]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,0x00};

volatile unsigned char ReceiveData, digit0;

void init_UART(void){
	UBRR0L=95;
  ce:	8f e5       	ldi	r24, 0x5F	; 95
  d0:	89 b9       	out	0x09, r24	; 9
	UCSR0B=0x90;
  d2:	80 e9       	ldi	r24, 0x90	; 144
  d4:	8a b9       	out	0x0a, r24	; 10
}
  d6:	08 95       	ret

000000d8 <__vector_18>:

SIGNAL(SIG_USART0_RECV){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	0b b6       	in	r0, 0x3b	; 59
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	ReceiveData=UDR0;
  ec:	8c b1       	in	r24, 0x0c	; 12
  ee:	80 93 13 01 	sts	0x0113, r24
	digit0=ReceiveData-0x30;
  f2:	80 91 13 01 	lds	r24, 0x0113
  f6:	80 53       	subi	r24, 0x30	; 48
  f8:	80 93 12 01 	sts	0x0112, r24

	if(digit0>=10) digit0=NULL;
  fc:	80 91 12 01 	lds	r24, 0x0112
 100:	8a 30       	cpi	r24, 0x0A	; 10
 102:	18 f0       	brcs	.+6      	; 0x10a <__vector_18+0x32>
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	80 93 12 01 	sts	0x0112, r24

	PORTB=Font[digit0];
 10a:	e0 91 12 01 	lds	r30, 0x0112
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	80 81       	ld	r24, Z
 116:	88 bb       	out	0x18, r24	; 24
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0b be       	out	0x3b, r0	; 59
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <main>:

int main(){
	DDRB=0xFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	87 bb       	out	0x17, r24	; 23
	PORTB=Font[NULL];
 130:	18 ba       	out	0x18, r1	; 24
const char Font[17]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,0x00};

volatile unsigned char ReceiveData, digit0;

void init_UART(void){
	UBRR0L=95;
 132:	8f e5       	ldi	r24, 0x5F	; 95
 134:	89 b9       	out	0x09, r24	; 9
	UCSR0B=0x90;
 136:	80 e9       	ldi	r24, 0x90	; 144
 138:	8a b9       	out	0x0a, r24	; 10

int main(){
	DDRB=0xFF;
	PORTB=Font[NULL];
	init_UART();
	sei();
 13a:	78 94       	sei
 13c:	ff cf       	rjmp	.-2      	; 0x13c <main+0x10>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
